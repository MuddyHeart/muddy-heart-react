// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Skill")));
bytes32 constant SkillTableId = _tableId;

struct SkillData {
  bytes32 name;
  bytes32 category;
  uint32 atk;
  uint32 def;
  uint32 hp;
  uint32 castTime;
  uint32 cooldown;
  uint32 duration;
  bool inUsed;
  address owner;
}

library Skill {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](10);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.BYTES32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.UINT32;
    _schema[5] = SchemaType.UINT32;
    _schema[6] = SchemaType.UINT32;
    _schema[7] = SchemaType.UINT32;
    _schema[8] = SchemaType.BOOL;
    _schema[9] = SchemaType.ADDRESS;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](10);
    _fieldNames[0] = "name";
    _fieldNames[1] = "category";
    _fieldNames[2] = "atk";
    _fieldNames[3] = "def";
    _fieldNames[4] = "hp";
    _fieldNames[5] = "castTime";
    _fieldNames[6] = "cooldown";
    _fieldNames[7] = "duration";
    _fieldNames[8] = "inUsed";
    _fieldNames[9] = "owner";
    return ("Skill", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get name */
  function getName(bytes32 key) internal view returns (bytes32 name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, bytes32 key) internal view returns (bytes32 name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set name */
  function setName(bytes32 key, bytes32 name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, bytes32 key, bytes32 name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((name)));
  }

  /** Get category */
  function getCategory(bytes32 key) internal view returns (bytes32 category) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get category (using the specified store) */
  function getCategory(IStore _store, bytes32 key) internal view returns (bytes32 category) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set category */
  function setCategory(bytes32 key, bytes32 category) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((category)));
  }

  /** Set category (using the specified store) */
  function setCategory(IStore _store, bytes32 key, bytes32 category) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((category)));
  }

  /** Get atk */
  function getAtk(bytes32 key) internal view returns (uint32 atk) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get atk (using the specified store) */
  function getAtk(IStore _store, bytes32 key) internal view returns (uint32 atk) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set atk */
  function setAtk(bytes32 key, uint32 atk) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((atk)));
  }

  /** Set atk (using the specified store) */
  function setAtk(IStore _store, bytes32 key, uint32 atk) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((atk)));
  }

  /** Get def */
  function getDef(bytes32 key) internal view returns (uint32 def) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get def (using the specified store) */
  function getDef(IStore _store, bytes32 key) internal view returns (uint32 def) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set def */
  function setDef(bytes32 key, uint32 def) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((def)));
  }

  /** Set def (using the specified store) */
  function setDef(IStore _store, bytes32 key, uint32 def) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((def)));
  }

  /** Get hp */
  function getHp(bytes32 key) internal view returns (uint32 hp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get hp (using the specified store) */
  function getHp(IStore _store, bytes32 key) internal view returns (uint32 hp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set hp */
  function setHp(bytes32 key, uint32 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((hp)));
  }

  /** Set hp (using the specified store) */
  function setHp(IStore _store, bytes32 key, uint32 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((hp)));
  }

  /** Get castTime */
  function getCastTime(bytes32 key) internal view returns (uint32 castTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get castTime (using the specified store) */
  function getCastTime(IStore _store, bytes32 key) internal view returns (uint32 castTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set castTime */
  function setCastTime(bytes32 key, uint32 castTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((castTime)));
  }

  /** Set castTime (using the specified store) */
  function setCastTime(IStore _store, bytes32 key, uint32 castTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((castTime)));
  }

  /** Get cooldown */
  function getCooldown(bytes32 key) internal view returns (uint32 cooldown) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get cooldown (using the specified store) */
  function getCooldown(IStore _store, bytes32 key) internal view returns (uint32 cooldown) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set cooldown */
  function setCooldown(bytes32 key, uint32 cooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((cooldown)));
  }

  /** Set cooldown (using the specified store) */
  function setCooldown(IStore _store, bytes32 key, uint32 cooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((cooldown)));
  }

  /** Get duration */
  function getDuration(bytes32 key) internal view returns (uint32 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get duration (using the specified store) */
  function getDuration(IStore _store, bytes32 key) internal view returns (uint32 duration) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set duration */
  function setDuration(bytes32 key, uint32 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((duration)));
  }

  /** Set duration (using the specified store) */
  function setDuration(IStore _store, bytes32 key, uint32 duration) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((duration)));
  }

  /** Get inUsed */
  function getInUsed(bytes32 key) internal view returns (bool inUsed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 8);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get inUsed (using the specified store) */
  function getInUsed(IStore _store, bytes32 key) internal view returns (bool inUsed) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 8);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set inUsed */
  function setInUsed(bytes32 key, bool inUsed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 8, abi.encodePacked((inUsed)));
  }

  /** Set inUsed (using the specified store) */
  function setInUsed(IStore _store, bytes32 key, bool inUsed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 8, abi.encodePacked((inUsed)));
  }

  /** Get owner */
  function getOwner(bytes32 key) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 9);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get owner (using the specified store) */
  function getOwner(IStore _store, bytes32 key) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 9);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set owner */
  function setOwner(bytes32 key, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 9, abi.encodePacked((owner)));
  }

  /** Set owner (using the specified store) */
  function setOwner(IStore _store, bytes32 key, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 9, abi.encodePacked((owner)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (SkillData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (SkillData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    bytes32 name,
    bytes32 category,
    uint32 atk,
    uint32 def,
    uint32 hp,
    uint32 castTime,
    uint32 cooldown,
    uint32 duration,
    bool inUsed,
    address owner
  ) internal {
    bytes memory _data = encode(name, category, atk, def, hp, castTime, cooldown, duration, inUsed, owner);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    bytes32 name,
    bytes32 category,
    uint32 atk,
    uint32 def,
    uint32 hp,
    uint32 castTime,
    uint32 cooldown,
    uint32 duration,
    bool inUsed,
    address owner
  ) internal {
    bytes memory _data = encode(name, category, atk, def, hp, castTime, cooldown, duration, inUsed, owner);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, SkillData memory _table) internal {
    set(
      key,
      _table.name,
      _table.category,
      _table.atk,
      _table.def,
      _table.hp,
      _table.castTime,
      _table.cooldown,
      _table.duration,
      _table.inUsed,
      _table.owner
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, SkillData memory _table) internal {
    set(
      _store,
      key,
      _table.name,
      _table.category,
      _table.atk,
      _table.def,
      _table.hp,
      _table.castTime,
      _table.cooldown,
      _table.duration,
      _table.inUsed,
      _table.owner
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (SkillData memory _table) {
    _table.name = (Bytes.slice32(_blob, 0));

    _table.category = (Bytes.slice32(_blob, 32));

    _table.atk = (uint32(Bytes.slice4(_blob, 64)));

    _table.def = (uint32(Bytes.slice4(_blob, 68)));

    _table.hp = (uint32(Bytes.slice4(_blob, 72)));

    _table.castTime = (uint32(Bytes.slice4(_blob, 76)));

    _table.cooldown = (uint32(Bytes.slice4(_blob, 80)));

    _table.duration = (uint32(Bytes.slice4(_blob, 84)));

    _table.inUsed = (_toBool(uint8(Bytes.slice1(_blob, 88))));

    _table.owner = (address(Bytes.slice20(_blob, 89)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 name,
    bytes32 category,
    uint32 atk,
    uint32 def,
    uint32 hp,
    uint32 castTime,
    uint32 cooldown,
    uint32 duration,
    bool inUsed,
    address owner
  ) internal view returns (bytes memory) {
    return abi.encodePacked(name, category, atk, def, hp, castTime, cooldown, duration, inUsed, owner);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
